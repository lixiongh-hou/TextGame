// Generated by Dagger (https://dagger.dev).
package com.sq.common_module.common.di;

import com.sq.common_module.common.utils.http.ApiService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProviderApiServiceFactory implements Factory<ApiService> {
  private final NetWorkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetWorkModule_ProviderApiServiceFactory(NetWorkModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiService get() {
    return providerApiService(module, retrofitProvider.get());
  }

  public static NetWorkModule_ProviderApiServiceFactory create(NetWorkModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetWorkModule_ProviderApiServiceFactory(module, retrofitProvider);
  }

  public static ApiService providerApiService(NetWorkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.providerApiService(retrofit));
  }
}
