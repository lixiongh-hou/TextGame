// Generated by Dagger (https://dagger.dev).
package com.sq.common_module.common.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProviderRetrofitFactory implements Factory<Retrofit> {
  private final NetWorkModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetWorkModule_ProviderRetrofitFactory(NetWorkModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return providerRetrofit(module, okHttpClientProvider.get());
  }

  public static NetWorkModule_ProviderRetrofitFactory create(NetWorkModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetWorkModule_ProviderRetrofitFactory(module, okHttpClientProvider);
  }

  public static Retrofit providerRetrofit(NetWorkModule instance, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.providerRetrofit(okHttpClient));
  }
}
