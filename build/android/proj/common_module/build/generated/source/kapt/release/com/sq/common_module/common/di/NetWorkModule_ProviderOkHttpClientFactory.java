// Generated by Dagger (https://dagger.dev).
package com.sq.common_module.common.di;

import com.sq.common_module.common.utils.http.MyInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetWorkModule_ProviderOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetWorkModule module;

  private final Provider<MyInterceptor> myInterceptorProvider;

  public NetWorkModule_ProviderOkHttpClientFactory(NetWorkModule module,
      Provider<MyInterceptor> myInterceptorProvider) {
    this.module = module;
    this.myInterceptorProvider = myInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providerOkHttpClient(module, myInterceptorProvider.get());
  }

  public static NetWorkModule_ProviderOkHttpClientFactory create(NetWorkModule module,
      Provider<MyInterceptor> myInterceptorProvider) {
    return new NetWorkModule_ProviderOkHttpClientFactory(module, myInterceptorProvider);
  }

  public static OkHttpClient providerOkHttpClient(NetWorkModule instance,
      MyInterceptor myInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.providerOkHttpClient(myInterceptor));
  }
}
